openapi: 3.0.0
info:
  title: Petstore
  version: 1.0.0
  description: "Este é um exemplo de serviço para loja de animais de estimação. Você pode saber mais consultando diretamente a documentação OpenApi versão 3.0.3 em [https://spec.openapis.org/oas/v3.0.3](https://spec.openapis.org/oas/v3.0.3)."
  termsOfService: "https://github.com/OAI/OpenAPI-Specification/blob/main/CODE_OF_CONDUCT.md"
  contact:
    name: Fulano de Tal
    url: http://bitbucket.com/arquitetura/fulanodetal/master
    email: fulano.tal@minhaempresa.com.br
  license:
    name: MinhaEmpresa License
    url: https://github.com/OAI/OpenAPI-Specification/blob/main/LICENSE

servers:
  - url: https://development.api.minhaempresa.com.br/{apiversion}
    description: Ambiente Desenvolvimento
  - url: https://qa.api.minhaempresa.com.br:{port}/{apiversion}
    description: Ambiente de Testes de Qualidade
  - url: https://api.minhaempresa.com.br:{port}/{apiversion}
    description: Produção
    variables:
      "apiversion":
        default: "v2"

tags:
- name: "pet"
  description: "Todos os endpoints relacionados aos animais de estimação da loja."
  externalDocs:
    description: "Para saber mais"
    url: "https://minhaempresa.atlassian.net/wiki/spaces/ATD"

paths:
  /pet:
    post:
      tags:
      - "pet"
      summary: "Adicionar um novo animal de estimação à loja"
      description: '
      Para adicionar um novo animal de estimação (pet) na loja, é necessário respeitar alguns critérios.
      Dentre eles estão:
      <ul>
         <li>campo "name" é obrigatório;</li>
         <li>campo "birthdate" é obrigatório;</li>
      </ul>
      '        
      operationId: "addPet"
      requestBody:
        description: 'Objeto Pet que deve ser cadastrado na loja'
        required: true
        content:
          'application/json':
            schema:
              $ref:  "#/components/schemas/Pet"
            examples:
              pet-201:
                summary: exemplo para fluxo de sucesso
                value: {"name":"okja", "birthdate":"1985-01-25"}
              pet-400-01:
                summary: exemplo 400 com código 400101
                value: {"birthdate":"1985-01-25"}
              pet-400-02:
                summary: exemplo 400 com código 400102
                value: {"name":"okja"}
      responses:
        '201':
          description: "Documento criado"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: ID do pet criado
                example: {"id": 123}                
          links:
            GetPetByPetId: #<---- nome do link é arbitrário
              operationId: getPet
              parameters:
                petId: '$/response.body#/id'
              description:
                O `id` retornado na resposta pode ser usado como
                parâmetro `petId` em `GET /pet/{petId}`
          headers:
            Location:
              description: "URI do objeto criado"
              style: simple
              schema:
                example: '/pet/123'

        '400':
          description: "Entrada inválida"
          content:
            'application/json':            
              examples:
                pet-400-01:
                  summary: exemplo 400 com código 400101
                  value: {"code":"400101", "description":"field 'name' is required"}
                pet-400-02:
                  summary: exemplo 400 com código 400102
                  value: {"code":"400101", "description":"field 'birthdate' is required"}

    get:
      tags:
      - "pet"
      summary: "Obter pets"
      description: 'Obter uma lista paginada de animais de estimação cadastrados'
      operationId: "getPet"
      responses:
        '200':
          description: "Lista de retorno paginada"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Pet"

  /pet/{petId}:
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: "aaaaaaa"
      operationId: "Atualiza um ou mais dados de um pet"
      parameters:        
        - name: petId
          in: "path"          
          description: "ID of pet that needs to be fetched"
          required: true
          schema:
            type: "integer"
            maximum: 10.0
            minimum: 1.0
            format: "int64"
          examples:
            retorno 200 OK:
              description: "Id de pet mocado"
              value: 1
            retorno 404 Not Found:
              description: "Id de pet inexistente"
              value: 99999
      requestBody:
        description: 'Dados a serem atualizados doo Pet'
        required: true
        content:
          'application/json':
            schema:
              $ref:  "#/components/schemas/Pet"
            examples:
              pet-200:
                summary: exemplo para fluxo de sucesso
                value: {"name":"okja2"}
              pet-400-03:
                summary: exemplo 400 com código 400103
                value: {"birthdate":"1111985-01-25"}
              pet-400-04:
                summary: exemplo 400 com código 400104
                value: {"name":"okja123"}
      responses:
        '200':
          description: "Documento atualizado"
        '400':
          description: "Entrada inválida"
          content:
            'application/json':            
              examples:
                pet-400-03:
                  summary: exemplo 400 com código 400103
                  value: {"code":"400103", "description":"field 'birthdate' is invalid"}
                pet-400-04:
                  summary: exemplo 400 com código 400104
                  value: {"code":"400101", "description":"field 'name' is invalid"}


components:
  schemas:
    Pet:
      type: "object"
      required:
      - "name"
      - "birthdate"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 123
        name:
          type: "string"
          example: "doggie"
        birthdate:
          type: string
          example: "1985-01-25"
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"


externalDocs:
  description: 'Saiba mais sobre esta API aqui.'
  url: 'http://swagger.io'